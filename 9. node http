参考API:
http://nodejs.cn/api/http.html

要是用http服务器与客户端，需要require('http')

HTTP消息头由一个对象表示，例如：
{ 'content-length': '123',
  'content-type': 'text/plain',
  'connection': 'keep-alive',
  'host': 'mysite.com',
  'accept': '*/*' }
  
  键名是小写，键值不能修改
  
  为了支持各种可能的 HTTP 应用，Node.js 的 HTTP API 是非常底层的。 它只涉及流处理与消息解析。 
  它把一个消息解析成消息头和消息主体，但不解析具体的消息头或消息主体。
 
 
response.writeHead(statusCode[, statusMessage][, headers])
  
statusCode <number>
statusMessage <string>
headers <Object>
发送一个响应头给请求。 状态码是一个三位数的 HTTP 状态码，如 404。 最后一个参数 headers 是响应头。 第二个参数 statusMessage 是可选的状态描述。
const body = 'hello world';
response.writeHead(200, {
  'Content-Length': Buffer.byteLength(body),
  'Content-Type': 'text/plain' });
  
 该方法在消息中只能被调用一次，且必须在 response.end() 被调用之前调用。 
 如果在调用该方法之前调用 response.write() 或 response.end()，则隐式的响应头会被处理并调用该函数。
 
 response.end([data][, encoding][, callback])
 data <string> | <Buffer>
encoding <string>
callback <Function>
  该方法会通知服务器，所有响应头和响应主体都已被发送，即服务器将其视为已完成。 每次响应都必须调用 response.end() 方法。

如果指定了 data，则相当于调用 response.write(data, encoding) 之后再调用 response.end(callback)。

如果指定了 callback，则当响应流结束时被调用。

  
var http = require('http');

var server = http.createServer(function(req, res){
  res.writeHead(200, {'Content-Type': 'text/plain'});
  res.end('Hey lb');
});

server.listen(3000, '127.0.0.1');
console.log('yo dawgs, now listening to port 3000');
  
  

